cmake_minimum_required(VERSION 2.8)
project(NeuralSlamDR)

set( ORB_SLAM_DIR ~/ORB_SLAM2/ )
set( ART_DIR ~/ARToolKit/ )

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

MESSAGE("Build type: " ${CMAKE_BUILD_TYPE})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall   -O3 -march=native")

# Check C++11 or C++0x support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++11.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules)

find_package(OpenCV 2.4.3 REQUIRED)
find_package(Eigen3 3.1.0 REQUIRED)
find_package(Pangolin REQUIRED)
find_package(OpenGL REQUIRED)
find_package(GLUT REQUIRED)
find_package(GStreamer REQUIRED)
find_package(LibXml2 REQUIRED)
#find_package(GLIB2 REQUIRED)

include_directories(
${ORB_SLAM_DIR}
${ORB_SLAM_DIR}/include
${ART_DIR}
${ART_DIR}/include
${ART_DIR}/include/AR
#${ART_DIR}/include/AR/sys
${EIGEN3_INCLUDE_DIR}
${Pangolin_INCLUDE_DIRS}
${GLUT_INCLUDE_DIR}
${GSTREAMER_BASE_INCLUDE_DIRS}
${GSTREAMER_INCLUDE_DIRS}
${LIBXML2_INCLUDE_DIR}
/usr/include/glib-2.0
#${GLIB2_INCLUDE_DIRS}
)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)

add_library(${PROJECT_NAME} SHARED
${ORB_SLAM_DIR}/src/System.cc
${ORB_SLAM_DIR}/src/Tracking.cc
${ORB_SLAM_DIR}/src/LocalMapping.cc
${ORB_SLAM_DIR}/src/LoopClosing.cc
${ORB_SLAM_DIR}/src/ORBextractor.cc
${ORB_SLAM_DIR}/src/ORBmatcher.cc
${ORB_SLAM_DIR}/src/FrameDrawer.cc
${ORB_SLAM_DIR}/src/Converter.cc
${ORB_SLAM_DIR}/src/MapPoint.cc
${ORB_SLAM_DIR}/src/KeyFrame.cc
${ORB_SLAM_DIR}/src/Map.cc
${ORB_SLAM_DIR}/src/MapDrawer.cc
${ORB_SLAM_DIR}/src/Optimizer.cc
${ORB_SLAM_DIR}/src/PnPsolver.cc
${ORB_SLAM_DIR}/src/Frame.cc
${ORB_SLAM_DIR}/src/KeyFrameDatabase.cc
${ORB_SLAM_DIR}/src/Sim3Solver.cc
${ORB_SLAM_DIR}/src/Initializer.cc
${ORB_SLAM_DIR}/src/Viewer.cc
)

#the libARVideo has been imbued with GStreamer power
set( ART_STATICS libARgsub_lite.a libARvideo.a libAR.a libARICP.a libAR.a)
link_directories(${ART_DIR}/lib)

#using library
target_link_libraries(${PROJECT_NAME}
${OpenCV_LIBS}
${EIGEN3_LIBS}
${Pangolin_LIBRARIES}
${ORB_SLAM_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
${ORB_SLAM_DIR}/Thirdparty/g2o/lib/libg2o.so
${GLUT_LIBRARIES}
${GSTREAMER_BASE_LIBRARIES}
${GSTREAMER_LIBRARIES}
/usr/lib/x86_64-linux-gnu/libgobject-2.0.so
/usr/lib/x86_64-linux-gnu/libgmodule-2.0.so
/usr/lib/x86_64-linux-gnu/libgthread-2.0.so
${LIBXML2_LIBRARIES}
/usr/lib/x86_64-linux-gnu/libglib-2.0.so
#${GLIB2_LIBRARIES}
)

# Build examples

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR})

add_executable(neural_slam_dr
neural_slam_dr.cc)
target_link_libraries(neural_slam_dr ${ART_STATICS} ${PROJECT_NAME} )

add_executable(simpleLite
simpleLite.c)
target_link_libraries(simpleLite ${ART_STATICS} ${PROJECT_NAME} )

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/calibration)
add_executable(calibrate
calibration/camera_calibration.cpp)
target_link_libraries(calibrate ${PROJECT_NAME})

